// Code generated by wap; DO NOT EDIT.

package main

import (
	"embed"
	"io/fs"
	"html/template"
	"log"
	"net/http"
	"strings"
	"github.com/julienschmidt/httprouter"
)

//go:embed public/build
var embedded embed.FS

var (
	tmplObj *template.Template
)

type Page struct {
	Title       string
	URLPath     string // http path ex. "/login"
	CSS         string // css file location
	JS          string // js file location
}

type App struct {
	Pages []Page
}

var wapApp = &App{
	Pages: []Page{
		// list pages
		
		{
			Title:   "Index",
			URLPath: "/",
			CSS:     "",
			JS:      "/public/build/index.js",
		},
		
		{
			Title:   "Index",
			URLPath: "/admin",
			CSS:     "/public/build/admin_index.css",
			JS:      "/public/build/admin_index.js",
		},
		
	},
}

func registerWAPGen(r *httprouter.Router) {
	var err error
	tmplObj, err = template.New("template.gohtml").Parse(htmlTemplate)

	if err != nil {
		log.Fatalf("Could not parse html template, error: %v", err)
	}
	for _, page := range wapApp.Pages {
		path := page.URLPath
		if strings.Contains(page.Title, "$slug") {
			path = strings.Replace(page.URLPath, "$slug", ":name", 1)
		}
		r.GET(path, createHandler(page))
	}

	// serve files
	
		r.ServeFiles("/public/build/*filepath", http.Dir("./public/build"))
	
}

// AssetHandler is used to load files at ./public/build/*
// implemnts fs.FS interface
type AssetHandler struct {
	fs embed.FS
}

// Open used to load files at ./public/build/*
// needed in order to correctly serve files with correct path
func (a *AssetHandler) Open(name string) (fs.File, error) {
	return a.fs.Open("public/build/" + name)
}

func createHandler(pageData Page) httprouter.Handle {
	return func(res http.ResponseWriter, req *http.Request, p httprouter.Params) {
		err := tmplObj.Execute(res, pageData)
		if err != nil {
			log.Fatalf("Error parsing template with page data: %v", err)
		}
	}
}

var htmlTemplate =`<html>
<head>
  <meta charset="utf-8">
  <script>
	const socket = new WebSocket('ws://192.168.1.155:8081');
	socket.addEventListener('open', function(event) {
		console.log('socket opened');
		window.onbeforeunload = function(){
			console.log('closing socket');
			socket.send('close');
		}
	})
	socket.addEventListener('message', function(event) {
		console.log('Message from server: ', event.data);
		if (event.data.includes('update')) {
			location.reload();
		}
	})
</script>

  <title>{{ .Title }}</title>

  {{ if .CSS }}
	  <link rel="stylesheet" href="{{ .CSS }}">
  {{ end }}

  <script src="{{ .JS }}" defer></script>
</head>

<body>
</body>
 </html>`